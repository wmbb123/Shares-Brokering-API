/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterfacegui;
import java.awt.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.RowFilter;
import org.json.JSONArray;
import org.json.JSONObject;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.json.JSONException;
import java.util.Calendar;
import java.util.Date;
import java.net.http.HttpClient;
import java.net.http.HttpHeaders;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

/**
 *
 * @author William Becker
 */
public class userInterface extends javax.swing.JFrame {
    DefaultTableModel tableModel, tableModel2;
    /**
     * Creates new form userInterface
     */
    public userInterface() {
        initComponents();
        tableModel = (DefaultTableModel) jTable.getModel();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();

        jLabel6.setText("jLabel6");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Refresh Shares");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable.setAutoCreateRowSorter(true);
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Company Name", "Company Code", "Exchange Name", "Shares Price", "Currency", "Market Change (%)", "Shares Available"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Buy and Sell Shares");

        jTextField1.setText("0");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton2.setText("Buy Shares");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField2.setText("AAPL");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sell Shares");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Enter Company Code:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Enter Amount of Shares:");

        jTextField3.setText("GBP");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Enter Currency:");

        jTextField4.setText("Search");
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField4KeyReleased(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Search for Company Code:");

        jLabel8.setText("Latest updated time: ");

        jLabel4.setText("e.g: 1 - 100");

        jLabel9.setText("e.g: GBP");

        jLabel10.setText("e.g: AAPL");

        jLabel11.setText("e.g: AAPL");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addGap(23, 23, 23))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(238, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField1)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel10))
                        .addGap(154, 154, 154))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(425, 425, 425))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel11))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filter(String query){ // Filter the table by characters or figures
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(tableModel);
        jTable.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(query));       
    }
    
    public double GetCurRate(String from, String to){
    // Connects the client to the API and connects with the refresh button and loads the currency the users selects against the GBP
        try {
            String urlString = String.format("http://localhost:8080/CurConvRS/webresources/exchangeRate?fromCur=%s&toCur=%s", from, to); // User will select a currency in a text box and it will change the conversion to their choice
            URL url = new URL(urlString); // Connecting the client to the REST API 
            HttpURLConnection connURL = (HttpURLConnection) url.openConnection();
            connURL.setRequestMethod("GET");
            connURL.connect();
            BufferedReader ins = new BufferedReader(new InputStreamReader(connURL.getInputStream()));
            String inString;
            StringBuilder sb = new StringBuilder();
            while ((inString = ins.readLine()) != null)  {
               sb.append(inString);
            }
           ins.close();
           connURL.disconnect();
           String space = sb.toString();
           String[] splited = space.split(" ");
           Double curRate = Double.parseDouble(splited[0]);
           return curRate;

           //call the XMLparse to process the REST API XML response

        } 
        catch (MalformedURLException me) {
            System.out.println("MalformedURLException: " + me);
        } 
        catch (IOException ioe) {
            System.out.println("IOException: " + ioe);
        }
     return 0;
    }

    public ArrayList<Stock> GetSharesRate() throws IOException, InterruptedException{ 
        ArrayList<Stock> stocks = new ArrayList<>();
        try{
            HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create("https://yfapi.net/v6/finance/quote?region=US&lang=en&symbols=AAPL%2CDELL%2CMCD%2CCOKE%2CMSFT%2CAMZN%2CGOOGL%2CTSCO"))
            .header("x-api-key", "NXhfhn30g665M5wtphXEh3MwyEaYsGsh96wksmre")
            .method("GET", HttpRequest.BodyPublishers.noBody())
            .build();
            HttpResponse<String> response = HttpClient.newHttpClient()
            .send(request, HttpResponse.BodyHandlers.ofString());
            System.out.println(response.body());
                FileWriter fileWriter = new FileWriter("data.json");
                fileWriter.write(response.body());
                fileWriter.close();

                JSONObject jsonObject = new JSONObject(response.body());
                JSONObject quoteResponse = jsonObject.getJSONObject("quoteResponse");
                JSONArray jsonArray = quoteResponse.getJSONArray("result");

                for (int i = 0; i < jsonArray.length(); i++) {
                    String symbol = jsonArray.getJSONObject(i).getString("symbol");
                    String name = jsonArray.getJSONObject(i).getString("displayName");
                    String currency = jsonArray.getJSONObject(i).getString("financialCurrency");
                    Double close = jsonArray.getJSONObject(i).getDouble("postMarketPrice");
                    String ExName = jsonArray.getJSONObject(i).getString("fullExchangeName");
                    String ExCurr = jsonArray.getJSONObject(i).getString("currency");
                    Double markChange = jsonArray.getJSONObject(i).getDouble("regularMarketChange");                    
                    Stock stock = new Stock(symbol, name, currency, close, ExName, ExCurr, markChange);
                    stocks.add(stock);
                }
            } catch (IOException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }                      
        return stocks;
    }
    
    private static String jsonParse(String RESTresponse) {

       JSONObject json = new JSONObject (RESTresponse);

       return json.toString();
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // Keeps table updated to users currency
        Date currentTime = Calendar.getInstance().getTime();        
        jLabel8.setText("Latest updated time: "+ currentTime); // Displays latest updated time the users clicks on refresh    
        String currencyRate = jTextField3.getText(); // Setting the variable as users input
        FileReader source = null;     
        try{
            source = new FileReader("F:\\SOCT\\data.txt"); // Reading through the "data.txt" text file for information about the shares        
            BufferedReader buffReader = new BufferedReader(source);
            String newLine;
           
            while ((newLine = buffReader.readLine()) !=null){

                tableModel.setRowCount(0); // Resets table before displaying information               
                JSONObject rootObject = new JSONObject(newLine);
                JSONArray sharesArray = new JSONArray(rootObject.getJSONArray("sharesMain")); // Searching through the array
                ArrayList<Stock> stocks = new ArrayList<>();
                try{
                HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://yfapi.net/v6/finance/quote?region=US&lang=en&symbols=AAPL%2CDELL%2CMCD%2CCOKE%2CMSFT%2CAMZN%2CGOOGL%2CTSCO"))
                .header("x-api-key", "E6XrPppK4f6ALejaozkYC1cSJuXdzlK75Nw5icBq") // Personalised Key given by Yahoo Finance API
                .method("GET", HttpRequest.BodyPublishers.noBody())
                .build();
                HttpResponse<String> response = HttpClient.newHttpClient()
                .send(request, HttpResponse.BodyHandlers.ofString());
                System.out.println(response.body());
                FileWriter fileWriter = new FileWriter("data.json");
                fileWriter.write(response.body());
                fileWriter.close();

                JSONObject jsonObject = new JSONObject(response.body());
                JSONObject quoteResponse = jsonObject.getJSONObject("quoteResponse"); // Object Name
                JSONArray jsonArray = quoteResponse.getJSONArray("result"); // Array Name

                for (int i = 0; i < jsonArray.length(); i++) {
                    String symbol = jsonArray.getJSONObject(i).getString("symbol");
                    String name = jsonArray.getJSONObject(i).getString("shortName");
                    String currency = jsonArray.getJSONObject(i).getString("financialCurrency");
                    Double close = jsonArray.getJSONObject(i).getDouble("regularMarketPrice");
                    String ExName = jsonArray.getJSONObject(i).getString("fullExchangeName");
                    String ExCurr = jsonArray.getJSONObject(i).getString("currency");
                    Double markChange = jsonArray.getJSONObject(i).getDouble("regularMarketChangePercent"); // Selecting specific options from Yahoo Finance API                      
                    JSONObject CurrentShares = new JSONObject();
                    CurrentShares = sharesArray.getJSONObject(i);
                    
                    tableModel.insertRow(i, new Object[]{name, symbol, ExName, close*GetCurRate(ExCurr,currencyRate), currencyRate, markChange, CurrentShares.getInt("amount")}); // Displaying table information                                                  
                    Stock stock = new Stock(symbol, name, currency, close, ExName, ExCurr, markChange);
                    stocks.add(stock);
                }
            } catch (IOException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }                
                //for (int i=0; i < sharesArray.length(); i++){
                //    JSONObject CurrentShares = new JSONObject();
                //    CurrentShares = sharesArray.getJSONObject(i);
                //    tableModel.insertRow(i, new Object[]{CurrentShares.getString("name"), CurrentShares.getString("code"), CurrentShares.getDouble("rate")*GetCurRate("GBP",currencyRate), currencyRate, CurrentShares.getInt("amount")}); // Displaying table information                                
                //    //System.out.println(CurrentShares.getString("code") + CurrentShares.getInt("amount"));                                                                    
                //}                
            }    
            source.close();           
        } catch (FileNotFoundException ex) {
            Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            source.close();
            
        }
        catch(IOException ex) {
            Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:      
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // Allows user to purchase shares
        if(tableModel.getRowCount() < 1){
        System.out.println("No currency selected"); // If main no currency has been inputted then do not continue                 
        }
        else {
        String sharesBought = jTextField1.getText();
        int userInt = Integer.parseInt(sharesBought);  
        String sharesCode = jTextField2.getText();        
        FileReader source = null;       
        try{
            source = new FileReader("F:\\SOCT\\data.txt");          
            BufferedReader buffReader = new BufferedReader(source);
            String newLine;            
            
            while ((newLine = buffReader.readLine()) != null){
                
                JSONObject rootObject = new JSONObject(newLine);
                JSONArray sharesArray = new JSONArray(rootObject.getJSONArray("sharesMain"));
                
                for (int i=0; i < sharesArray.length(); i++){
                    JSONObject CurrentShares = new JSONObject();
                    CurrentShares = sharesArray.getJSONObject(i);
                                   
                    System.out.println(CurrentShares.getString("code") + CurrentShares.getInt("amount"));
                    //String[] names = {"Company Name","Code","Share Price","Shares Available"};
                                                                                 
                    FileWriter sharesFile = new FileWriter("F:\\SOCT\\data.txt");     
                    JSONObject jsonObject = new JSONObject(sharesArray.get(i).toString());
                    try
                    {                           
                        if(jsonObject.getString("code").equals(sharesCode)) {
                            int buy = CurrentShares.getInt("amount")-userInt;
                            jsonObject.put("amount", buy);
                            //tableModel.setColumnIdentifiers(names);
                            tableModel.insertRow(i, new Object[]{CurrentShares.getString("name"), CurrentShares.getString("code"), null, null, null, null , buy});    
                            //double amountPaid = userInt*CurrentShares.getDouble("rate");
                            //tableModel2.insertRow(i, new Object[]{CurrentShares.getString("code"), "Buy", CurrentShares.getInt("amount"), CurrentShares.getInt("amount")});                        
                        
                        }
                        else
                        {
                            System.out.println("ERROR");
                        }
                        sharesArray.put(i, jsonObject);
                        System.out.println("{sharesMain:"+sharesArray.toString()+"}");
                        sharesFile.write("{\"sharesMain\":"+sharesArray.toString()+"}"); 
                        //break;                               
                               

                    }
                    catch (IOException IO){
                        IO.printStackTrace();
                    }
                    finally{
                        sharesFile.flush();
                        sharesFile.close();                                     
                    }
                } 
            }    
            source.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            source.close();
            
        }
        catch(IOException ex) {
            Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
        } 
        }
    }//GEN-LAST:event_jButton2MouseClicked
    
    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // Allows users to Sell shares
        if(tableModel.getRowCount() < 1){
        System.out.println("No currency selected");                  
        }
        else {
        String sharesBought = jTextField1.getText();
        int userInt = Integer.parseInt(sharesBought);       
        String sharesCode = jTextField2.getText();
        String currencyRate = jTextField3.getText();
        FileReader source = null;     
        try{
            source = new FileReader("F:\\SOCT\\data.txt");           
            BufferedReader buffReader = new BufferedReader(source);           
            String newLine;              
            
            while ((newLine = buffReader.readLine()) != null){
                
                JSONObject rootObject = new JSONObject(newLine);
                JSONArray sharesArray = new JSONArray(rootObject.getJSONArray("sharesMain"));
                
                for (int i=0; i < sharesArray.length(); i++){
                    
                    JSONObject CurrentShares = new JSONObject();
                    CurrentShares = sharesArray.getJSONObject(i);                                  
                    System.out.println(CurrentShares.getString("code") + CurrentShares.getInt("amount"));
                    //String[] names = {"Company Name","Code","Share Price","Shares Available"};                                                                                  
                    FileWriter sharesFile = new FileWriter("F:\\SOCT\\data.txt");     
                    JSONObject jsonObject = new JSONObject(sharesArray.get(i).toString());

                    try
                    {                       
                        if(jsonObject.getString("code").equals(sharesCode)) {
                            int sell = CurrentShares.getInt("amount")+userInt;
                            jsonObject.put("amount", sell);
                            double amountPaid = userInt*CurrentShares.getDouble("rate");
                            //tableModel.setColumnIdentifiers(names);
                            tableModel.insertRow(i, new Object[]{CurrentShares.getString("name"), CurrentShares.getString("code"), null, null, null, null, sell});                                 
                            //tableModel2.insertRow(i, new Object[]{currencyRate, "Sell", sell, amountPaid});   
                        }
                        else if (jsonObject.getString("code") != sharesCode)
                        {
                            System.out.println("ERROR");
                        }
                        sharesArray.put(i, jsonObject);
                        System.out.println("{sharesMain:"+sharesArray.toString()+"}");
                        sharesFile.write("{\"sharesMain\":"+sharesArray.toString()+"}"); 
                        //break;

                    }
                    catch (IOException IO){
                        IO.printStackTrace();
                    }
                    finally{
                        sharesFile.flush();
                        sharesFile.close();                                     
                    }
                } 
            }    
            source.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            source.close();
            
        }
        catch(IOException ex) {
            Logger.getLogger(userInterface.class.getName()).log(Level.SEVERE, null, ex);
        }  
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyReleased
        // Filtering table to users choice
        String query = jTextField4.getText();
        filter(query);
    }//GEN-LAST:event_jTextField4KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(userInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(userInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(userInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(userInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new userInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
